# Copyright (C) 2016 Nippon Telegraph and Telephone Corporation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import time
import sys

from operator import attrgetter

from ryu.app import simple_switch
from ryu.controller import ofp_event
from ryu.controller.handler import CONFIG_DISPATCHER, MAIN_DISPATCHER, DEAD_DISPATCHER
from ryu.controller.handler import set_ev_cls
from ryu.lib import hub
from ryu.ofproto import ofproto_v1_0
from ryu.ofproto import ofproto_v1_0_parser
from ryu.lib.packet import packet
from ryu.lib.packet import ethernet
from ryu.lib.packet import ether_types

class DatapathStatistics:
    def __init__(self):
        self.portStats = {}

class PortStatistic:
    
    def __init__(self, lastRXB, t):
        self.lastRXByteValue = lastRXB
        self.lastValueTime = t

class SimpleMonitor10(simple_switch.SimpleSwitch):

    def __init__(self, *args, **kwargs):
        super(SimpleMonitor10, self).__init__(*args, **kwargs)
        self.datapaths = {}
        self.datapathstats = {}
        self.monitor_thread = hub.spawn(self._monitor)
        self.dosdatarate = 10000
        self.macstoblock = []

    @set_ev_cls(ofp_event.EventOFPStateChange,
                [MAIN_DISPATCHER, DEAD_DISPATCHER])
    def _state_change_handler(self, ev):
        datapath = ev.datapath
        if ev.state == MAIN_DISPATCHER:
            if datapath.id not in self.datapaths:
                self.logger.debug('register datapath: %016x', datapath.id)
                self.datapaths[datapath.id] = datapath
                self.datapathstats[datapath.id] = DatapathStatistics()
        elif ev.state == DEAD_DISPATCHER:
            if datapath.id in self.datapaths:
                self.logger.debug('unregister datapath: %016x', datapath.id)
                del self.datapaths[datapath.id]
                del self.datapathstats[datapath.id]

    def _monitor(self):
        while True:
            for dp in self.datapaths.values():
                self._request_stats(dp)
            hub.sleep(10)

    def _request_stats(self, datapath):
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        req = parser.OFPFlowStatsRequest(datapath, 0, parser.OFPMatch(), 0xff, ofproto.OFPP_NONE)
        datapath.send_msg(req)

        req = parser.OFPPortStatsRequest(datapath, 0, ofproto.OFPP_NONE)
        datapath.send_msg(req)

    @set_ev_cls(ofp_event.EventOFPFlowStatsReply, MAIN_DISPATCHER)
    def _flow_stats_reply_handler(self, ev):
        body = ev.msg.body

        self.logger.info('datapath         '
                         'in-port  eth-dst           '
                         'out-port packets  bytes')
        self.logger.info('---------------- '
                         '-------- ----------------- '
                         '-------- -------- --------')
        for stat in sorted([flow for flow in body if flow.priority == 1],
                           key=lambda flow: (flow.match['in_port'],
                                             flow.match['eth_dst'])):
            self.logger.info('%016x %8x %17s %8x %8d %8d',
                             ev.msg.datapath.id,
                             stat.match['in_port'], stat.match['eth_dst'],
                             stat.instructions[0].actions[0].port,
                             stat.packet_count, stat.byte_count)

    @set_ev_cls(ofp_event.EventOFPPortStatsReply, MAIN_DISPATCHER)
    def _port_stats_reply_handler(self, ev):
        body = ev.msg.body

        self.logger.info('datapath         port     '
                         'rx-pkts  rx-bytes rx-error '
                         'tx-pkts  tx-bytes tx-error')
        self.logger.info('---------------- -------- '
                         '-------- -------- -------- '
                         '-------- -------- --------')
        for stat in sorted(body, key=attrgetter('port_no')):
            self.logger.info('%016x %8x %8d %8d %8d %8d %8d %8d',
                             ev.msg.datapath.id, stat.port_no,
                             stat.rx_packets, stat.rx_bytes, stat.rx_errors,
                             stat.tx_packets, stat.tx_bytes, stat.tx_errors)
            
            # Store statistics and compute data rate.
            currentTime = time.time()
            try:
                self.datapathstats[ev.msg.datapath.id].portStats[stat.port_no]
                
                if self.datapathstats[ev.msg.datapath.id].portStats[stat.port_no].lastValueTime == 0:
                    self.datapathstats[ev.msg.datapath.id].portStats[stat.port_no] = PortStatistic(stat.rx_bytes, currentTime)
                else:
                    lastByteVal = self.datapathstats[ev.msg.datapath.id].portStats[stat.port_no].lastRXByteValue
                    lastTimeVal = self.datapathstats[ev.msg.datapath.id].portStats[stat.port_no].lastValueTime
                    self.datapathstats[ev.msg.datapath.id].portStats[stat.port_no] = PortStatistic(stat.rx_bytes, currentTime)
                    dataRateSinceLast = (self.datapathstats[ev.msg.datapath.id].portStats[stat.port_no].lastRXByteValue - lastByteVal) / (self.datapathstats[ev.msg.datapath.id].portStats[stat.port_no].lastValueTime - lastTimeVal)
                    
                    if dataRateSinceLast > self.dosdatarate:
                        self.logger.info('DoS BEHAVIOR DETECTED. SHUTTING DOWN PORT AND BLOCKING MAC ADDRESS...')
                        for dp in self.mac_to_port[ev.msg.datapath.id]:
                            self.logger.info('%d', self.mac_to_port[ev.msg.datapath.id][dp])
                            self.logger.info('pn %s', dp)
                            if self.mac_to_port[ev.msg.datapath.id][dp] == stat.port_no:
                                self.logger.info('equal')
                                if dp not in self.macstoblock:
                                    self.logger.info('dafuq')
                                    self.macstoblock.append(dp)
                                    self.logger.info('not in')
                                    self.logger.info('s %s', self.macstoblock)
                        instructions = []
                        
                        match=ev.msg.datapath.ofproto_parser.OFPMatch(in_port=stat.port_no)
                        mod = ev.msg.datapath.ofproto_parser.OFPFlowMod(
                            datapath=ev.msg.datapath, match=match, cookie=0,
                            command=ev.msg.datapath.ofproto.OFPFC_DELETE)
                        ev.msg.datapath.send_msg(mod)
            except:
                self.datapathstats[ev.msg.datapath.id].portStats[stat.port_no] = PortStatistic(stat.rx_bytes, currentTime)
                self.logger.info(sys.exc_info()[0])

    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)
    def _packet_in_handler(self, ev):
        msg = ev.msg
        datapath = msg.datapath
        ofproto = datapath.ofproto

        pkt = packet.Packet(msg.data)
        eth = pkt.get_protocol(ethernet.ethernet)

        if eth.ethertype == ether_types.ETH_TYPE_LLDP:
            # ignore lldp packet
            return
        dst = eth.dst
        src = eth.src

        dpid = datapath.id
        self.mac_to_port.setdefault(dpid, {})

        #self.logger.info("packet in %s %s %s %s", dpid, src, dst, msg.in_port)

        # learn a mac address to avoid FLOOD next time.
        self.mac_to_port[dpid][src] = msg.in_port

        if dst in self.mac_to_port[dpid]:
            out_port = self.mac_to_port[dpid][dst]
        else:
            out_port = ofproto.OFPP_FLOOD

        actions = [datapath.ofproto_parser.OFPActionOutput(out_port)]
        
        macblocked = 0
        for mac in self.macstoblock:
            if mac == src:
                macblocked = 1
            if mac == dst:
                macblocked = 1
            #self.logger.info('mac %s', mac)
        
        if macblocked == 1:
            self.logger.info('macblocked')
            return
        
        # install a flow to avoid packet_in next time
        if out_port != ofproto.OFPP_FLOOD:
            self.add_flow(datapath, msg.in_port, dst, src, actions)

        data = None
        if msg.buffer_id == ofproto.OFP_NO_BUFFER:
            data = msg.data

        out = datapath.ofproto_parser.OFPPacketOut(
            datapath=datapath, buffer_id=msg.buffer_id, in_port=msg.in_port,
            actions=actions, data=data)
        datapath.send_msg(out)

    @set_ev_cls(ofp_event.EventOFPPortStatus, MAIN_DISPATCHER)
    def _port_status_handler(self, ev):
        msg = ev.msg
        reason = msg.reason
        port_no = msg.desc.port_no

        ofproto = msg.datapath.ofproto
        if reason == ofproto.OFPPR_ADD:
            self.logger.info("port added %s", port_no)
        elif reason == ofproto.OFPPR_DELETE:
            self.logger.info("port deleted %s", port_no)
        elif reason == ofproto.OFPPR_MODIFY:
            self.logger.info("port modified %s", port_no)
        else:
            self.logger.info("Illeagal port state %s %s", port_no, reason)
